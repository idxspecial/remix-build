{
  "version": 3,
  "sources": ["browser-route-module:C:\\Projects\\remix-jokes\\app\\routes\\jokes\\new.tsx?browser", "../../../../app/routes/jokes/new.tsx"],
  "sourcesContent": ["export { default } from \"C:\\\\Projects\\\\remix-jokes\\\\app\\\\routes\\\\jokes\\\\new.tsx\";", "import type { ActionFunction } from \"remix\";\r\nimport { useActionData, redirect, json } from \"remix\";\r\nimport { db } from \"~/utils/db.server\";\r\n\r\nfunction validateJokeContent(content: string) {\r\n  if (content.length < 10) {\r\n    return `That joke is too short`;\r\n  }\r\n}\r\n\r\nfunction validateJokeName(name: string) {\r\n  if (name.length < 2) {\r\n    return `That joke's name is too short`;\r\n  }\r\n}\r\n\r\ntype ActionData = {\r\n  formError?: string;\r\n  fieldErrors?: {\r\n    name: string | undefined;\r\n    content: string | undefined;\r\n  };\r\n  fields?: {\r\n    name: string;\r\n    content: string;\r\n  };\r\n};\r\n\r\nconst badRequest = (data: ActionData) =>\r\n  json(data, { status: 400 });\r\n\r\nexport const action: ActionFunction = async ({\r\n  request\r\n}) => {\r\n  const form = await request.formData();\r\n  const name = form.get(\"name\");\r\n  const content = form.get(\"content\");\r\n  // we do this type check to be extra sure and to make TypeScript happy\r\n  // we'll explore validation next!\r\n  if (\r\n    typeof name !== \"string\" ||\r\n    typeof content !== \"string\"\r\n  ) {\r\n    return badRequest({\r\n      formError: `Form not submitted correctly.`\r\n    });\r\n  }\r\n\r\n  const fieldErrors = {\r\n    name: validateJokeName(name),\r\n    content: validateJokeContent(content)\r\n  };\r\n  const fields = { name, content };\r\n  if (Object.values(fieldErrors).some(Boolean)) {\r\n    return badRequest({ fieldErrors, fields });\r\n  }\r\n\r\n  const joke = await db.joke.create({ data: fields });\r\n  return redirect(`/jokes/${joke.id}`);\r\n};\r\n\r\nexport default function NewJokeRoute() {\r\n  const actionData = useActionData<ActionData>();\r\n\r\n  return (\r\n    <div>\r\n      <p>Add your own hilarious joke</p>\r\n      <form method=\"post\">\r\n        <div>\r\n          <label>\r\n            Name:{\" \"}\r\n            <input\r\n              type=\"text\"\r\n              defaultValue={actionData?.fields?.name}\r\n              name=\"name\"\r\n              aria-invalid={\r\n                Boolean(actionData?.fieldErrors?.name) ||\r\n                undefined\r\n              }\r\n              aria-describedby={\r\n                actionData?.fieldErrors?.name\r\n                  ? \"name-error\"\r\n                  : undefined\r\n              }\r\n            />\r\n          </label>\r\n          {actionData?.fieldErrors?.name ? (\r\n            <p\r\n              className=\"form-validation-error\"\r\n              role=\"alert\"\r\n              id=\"name-error\"\r\n            >\r\n              {actionData.fieldErrors.name}\r\n            </p>\r\n          ) : null}\r\n        </div>\r\n        <div>\r\n          <label>\r\n            Content:{\" \"}\r\n            <textarea\r\n              defaultValue={actionData?.fields?.content}\r\n              name=\"content\"\r\n              aria-invalid={\r\n                Boolean(actionData?.fieldErrors?.content) ||\r\n                undefined\r\n              }\r\n              aria-describedby={\r\n                actionData?.fieldErrors?.content\r\n                  ? \"content-error\"\r\n                  : undefined\r\n              }\r\n            />\r\n          </label>\r\n          {actionData?.fieldErrors?.content ? (\r\n            <p\r\n              className=\"form-validation-error\"\r\n              role=\"alert\"\r\n              id=\"content-error\"\r\n            >\r\n              {actionData.fieldErrors.content}\r\n            </p>\r\n          ) : null}\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\" className=\"button\">\r\n            Add\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}"],
  "mappings": ";;;;;;;;;;;AAAA;;;ACAA;AAEA,gBAAmB;AA2DJ,wBAAwB;AA7DvC;AA8DE,QAAM,aAAa;AAEnB,SACE,oCAAC,OAAD,MACE,oCAAC,KAAD,MAAG,gCACH,oCAAC,QAAD;AAAA,IAAM,QAAO;AAAA,KACX,oCAAC,OAAD,MACE,oCAAC,SAAD,MAAO,SACC,KACN,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,cAAc,+CAAY,WAAZ,mBAAoB;AAAA,IAClC,MAAK;AAAA,IACL,gBACE,QAAQ,+CAAY,gBAAZ,mBAAyB,SACjC;AAAA,IAEF,oBACE,gDAAY,gBAAZ,mBAAyB,QACrB,eACA;AAAA,OAIT,gDAAY,gBAAZ,mBAAyB,QACxB,oCAAC,KAAD;AAAA,IACE,WAAU;AAAA,IACV,MAAK;AAAA,IACL,IAAG;AAAA,KAEF,WAAW,YAAY,QAExB,OAEN,oCAAC,OAAD,MACE,oCAAC,SAAD,MAAO,YACI,KACT,oCAAC,YAAD;AAAA,IACE,cAAc,+CAAY,WAAZ,mBAAoB;AAAA,IAClC,MAAK;AAAA,IACL,gBACE,QAAQ,+CAAY,gBAAZ,mBAAyB,YACjC;AAAA,IAEF,oBACE,gDAAY,gBAAZ,mBAAyB,WACrB,kBACA;AAAA,OAIT,gDAAY,gBAAZ,mBAAyB,WACxB,oCAAC,KAAD;AAAA,IACE,WAAU;AAAA,IACV,MAAK;AAAA,IACL,IAAG;AAAA,KAEF,WAAW,YAAY,WAExB,OAEN,oCAAC,OAAD,MACE,oCAAC,UAAD;AAAA,IAAQ,MAAK;AAAA,IAAS,WAAU;AAAA,KAAS;AAAA;",
  "names": []
}
